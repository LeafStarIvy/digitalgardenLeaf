---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.head %}{% include imp %}{% endfor %}
    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    <button class="fullscreen-btn" id="fullscreenBtn" aria-pressed="false" title="Toggle Focus Mode">
      <svg class="fs-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" aria-hidden="true"><path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M16 3h3a2 2 0 0 1 2 2v3"/><path d="M8 21H5a2 2 0 0 1-2-2v-3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/></svg>
      <span class="fs-label">Focus Mode</span>
    </button>

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    {# Keep the same galaxy layers for notes so the aesthetic is uniform #}
    <div class="galaxy-skybox small" aria-hidden="true">
      <canvas id="starCanvasSmall" class="star-canvas small-canvas"></canvas>
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--front"></div>
      <div id="shootingStarContainerSmall" class="shooting-stars"></div>
      <div class="video-background">
        <video autoplay muted loop playsinline preload="auto" class="bg-video">
          <source src="/img/video/Astrogalaxy1.webm" type="video/webm">
        </video>
      </div>
    </div>

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title" data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">
            {% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}
          </h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.notes.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}
    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}
    {% include "components/particlesScript.njk" %}

    <script>
      /* ------------- Focus Mode (Fullscreen-like) ------------- */
      (function(){
        const btn = document.getElementById('fullscreenBtn');
        if (!btn) return;
        let focused = false;
        const body = document.body;

        function setBtnLabel() {
          btn.setAttribute('aria-pressed', String(focused));
          const label = btn.querySelector('.fs-label');
          if (label) label.textContent = focused ? 'Exit Focus' : 'Focus Mode';
        }

        function toggleFocus() {
          focused = !focused;
          body.classList.toggle('fullscreen-mode', focused);
          setBtnLabel();
          setTimeout(()=> window.dispatchEvent(new Event('resize')), 120);
        }

        btn.addEventListener('click', toggleFocus);
        document.addEventListener('keydown', (e) => {
          if (e.key === 'F11') { e.preventDefault(); toggleFocus(); }
          if (e.key === 'Escape' && focused) { toggleFocus(); }
        });
      })();

      /* ------------- Small star canvas for notes ------------- */
      (function() {
        const canvas = document.getElementById('starCanvasSmall');
        if (!canvas) return;
        const ctx = canvas.getContext('2d');
        let w = canvas.width = Math.max(window.innerWidth, 600);
        let h = canvas.height = Math.max(window.innerHeight, 300);
        const DPR = window.devicePixelRatio || 1;
        canvas.width = w * DPR;
        canvas.height = h * DPR;
        canvas.style.width = w + 'px';
        canvas.style.height = h + 'px';
        ctx.scale(DPR, DPR);

        const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        const stars = [];
        function rand(min,max){ return Math.random()*(max-min)+min; }

        function init(){
          stars.length = 0;
          const count = (window.innerWidth < 768) ? 50 : 110;
          for (let i=0;i<count;i++){
            stars.push({
              x: rand(0,w),
              y: rand(0,h),
              r: rand(0.4,1.4),
              a: rand(0.15,0.9),
              tw: rand(0,Math.PI*2)
            });
          }
        }
        function draw(t){
          ctx.clearRect(0,0,w,h);
          for (let i=0;i<stars.length;i++){
            const s = stars[i];
            const alpha = prefersReduced ? s.a : s.a + Math.sin((t/800)+s.tw)*0.25;
            ctx.fillStyle = 'rgba(255,255,255,' + Math.max(0.06, Math.min(1, alpha)) + ')';
            ctx.beginPath();
            ctx.arc(s.x, s.y, s.r, 0, Math.PI*2);
            ctx.fill();
          }
        }
        let raf;
        function loop(ts){ draw(ts); raf = requestAnimationFrame(loop); }
        init();
        if (!prefersReduced) loop(performance.now()); else draw(performance.now());

        window.addEventListener('resize', ()=> {
          clearTimeout(window._noteResize);
          window._noteResize = setTimeout(()=>{
            w = canvas.width = Math.max(window.innerWidth, 600);
            h = canvas.height = Math.max(window.innerHeight, 300);
            const DPR = window.devicePixelRatio || 1;
            canvas.width = w * DPR;
            canvas.height = h * DPR;
            canvas.style.width = w + 'px';
            canvas.style.height = h + 'px';
            ctx.scale(DPR, DPR);
            init();
          }, 200);
        });
      })();
    </script>

  </body>
</html>
