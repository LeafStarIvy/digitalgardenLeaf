---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>

    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.head %}{% include imp %}{% endfor %}

    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    <!-- Unified galaxy skybox (same as index) -->
    <div class="galaxy-skybox" id="galaxySkybox" aria-hidden="true">
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--mid"></div>
      <div class="nebula nebula--front"></div>
      <div id="shootingStarContainer" class="shooting-stars" aria-hidden="true"></div>
    </div>

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title" data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">
            {% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}
          </h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.notes.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}
    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}

    {% include "components/particlesScript.njk" %}

{# ===== Project UI: controls + theatre overlays (replace previous snippet) ===== #}
<div class="dg-controls" aria-hidden="false">
  <button class="fullscreen-btn" id="fullscreenToggle" aria-pressed="false" title="Toggle fullscreen (F)">
    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M7 14H5v5h5v-2H7v-3zM5 10h2V7h3V5H5v5zM19 19h-3v2h5v-5h-2v3zM15 3v2h3v3h2V3h-5z" stroke="currentColor" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/></svg>
    Fullscreen
  </button>

  <button class="theatre-btn" id="theatreToggle" aria-pressed="false" title="Toggle theatre (T)" style="display:none;">
    ðŸŽ¬ Theatre
  </button>
</div>

{# Overlays for theatre (kept in DOM but hidden unless theatre is active) #}
<div class="theatre-overlays" aria-hidden="true" hidden>
  <div class="vignette" aria-hidden="true"></div>
  <div class="side-light left" aria-hidden="true"></div>
  <div class="side-light right" aria-hidden="true"></div>
  <div class="grain" aria-hidden="true"></div>
</div>

<script>
/* Toggle fullscreen/class states and wrap YouTube iframes into a .video-wrapper
   - Only wraps YouTube iframes (youtube.com, youtu.be, youtube-nocookie)
   - If iframe is inside a <figure>, wrap the whole figure to preserve captions
   - Theatre button is visible only when fullscreen-mode is active
*/
(function () {
  const body = document.body;
  const fsBtn = document.getElementById('fullscreenToggle');
  const thBtn = document.getElementById('theatreToggle');
  const overlayContainer = document.querySelector('.theatre-overlays');

  function setButtonState() {
    const isFS = body.classList.contains('fullscreen-mode');
    const isTH = body.classList.contains('theatre-mode');
    fsBtn.setAttribute('aria-pressed', String(isFS));
    thBtn.setAttribute('aria-pressed', String(isTH));
    thBtn.style.display = isFS ? 'inline-flex' : 'none';
    // manage overlay hidden attribute for accessibility
    if (isFS && isTH) overlayContainer.hidden = false;
    else overlayContainer.hidden = true;
  }

  function toggleFullscreenMode() {
    body.classList.toggle('fullscreen-mode');
    // turning off fullscreen also turns off theatre
    if (!body.classList.contains('fullscreen-mode')) body.classList.remove('theatre-mode');
    setButtonState();
  }

  function toggleTheatreMode() {
    if (!body.classList.contains('fullscreen-mode')) return;
    body.classList.toggle('theatre-mode');
    setButtonState();
  }

  fsBtn.addEventListener('click', toggleFullscreenMode);
  thBtn.addEventListener('click', toggleTheatreMode);

  // keyboard shortcuts: F => fullscreen, T => theatre (only when fullscreen), Esc => exit both
  document.addEventListener('keydown', (ev) => {
    if (ev.target && /input|textarea|select/i.test(ev.target.tagName)) return;
    if (ev.key.toLowerCase() === 'f') { ev.preventDefault(); toggleFullscreenMode(); }
    if (ev.key.toLowerCase() === 't') { ev.preventDefault(); toggleTheatreMode(); }
    if (ev.key === 'Escape') {
      body.classList.remove('theatre-mode'); body.classList.remove('fullscreen-mode');
      setButtonState();
    }
  });

  /* Wrap YouTube iframes in a .video-wrapper for correct 16:9 scaling.
     If iframe is inside a <figure>, wrap the whole <figure> so captions remain.
  */
  function wrapYouTubeIframes() {
    const selectors = [
      'iframe[src*="youtube.com"]',
      'iframe[src*="youtu.be"]',
      'iframe[src*="youtube-nocookie"]'
    ].join(',');

    const frames = Array.from(document.querySelectorAll(selectors));
    frames.forEach((iframe) => {
      if (!iframe || iframe.closest('.video-wrapper')) return; // already wrapped
      // avoid wrapping inside known non-video containers (defensive)
      const topAnchor = iframe.closest('figure') || iframe.parentElement;
      if (!topAnchor || topAnchor.classList.contains('video-wrapper')) return;

      const wrapper = document.createElement('div');
      wrapper.className = 'video-wrapper';

      // Insert wrapper before topAnchor then move topAnchor into wrapper
      try {
        topAnchor.parentNode.insertBefore(wrapper, topAnchor);
        wrapper.appendChild(topAnchor);
      } catch (e) {
        // fallback: if insertion fails, just wrap the iframe
        if (iframe.parentNode) {
          iframe.parentNode.insertBefore(wrapper, iframe);
          wrapper.appendChild(iframe);
        }
      }
    });
  }

  // Run on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => { wrapYouTubeIframes(); setButtonState(); });
  } else {
    wrapYouTubeIframes(); setButtonState();
  }

  // If your site dynamically adds content, uncomment a MutationObserver (left commented as conservative)
  /*
  const observer = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.addedNodes && m.addedNodes.length) {
        wrapYouTubeIframes();
      }
    }
  });
  observer.observe(document.body, { childList: true, subtree: true });
  */
})();
</script>

  </body>
</html>
