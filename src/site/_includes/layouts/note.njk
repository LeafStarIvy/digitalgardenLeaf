---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>

    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.head %}{% include imp %}{% endfor %}

    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    <!-- Unified galaxy skybox (same as index) -->
    <div class="galaxy-skybox" id="galaxySkybox" aria-hidden="true">
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--mid"></div>
      <div class="nebula nebula--front"></div>
      <div id="shootingStarContainer" class="shooting-stars" aria-hidden="true"></div>
    </div>

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title" data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">
            {% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}
          </h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.notes.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}
    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}

    {% include "components/particlesScript.njk" %}

{# ===== Floating buttons (top-right) ===== #}
<button id="fullscreen-toggle" class="fullscreen-btn" aria-pressed="false" title="Toggle fullscreen (F)">
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M9 3H3v6" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><path d="M21 9V3h-6" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><path d="M15 21h6v-6" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/><path d="M3 15v6h6" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/></svg>
  Fullscreen
</button>

<button id="theatre-toggle-btn" aria-pressed="false" title="Toggle theatre (T)">
  ðŸŽ¥ Theatre
</button>

{# ===== Theatre overlays (in DOM but visually inactive until theatre-mode) ===== #}
<div class="theatre-side-light left" aria-hidden="true"></div>
<div class="theatre-side-light right" aria-hidden="true"></div>
<div class="theatre-vignette" aria-hidden="true"></div>
<div class="theatre-grain" aria-hidden="true"></div>

<script>
(() => {
  const body = document.body;
  const fsBtn = document.getElementById('fullscreen-toggle');
  const thBtn = document.getElementById('theatre-toggle-btn');

  // Helpers for state
  const isFS = () => body.classList.contains('fullscreen-mode');
  const isTH = () => body.classList.contains('theatre-mode');

  function applyUI() {
    fsBtn.setAttribute('aria-pressed', String(isFS()));
    thBtn.setAttribute('aria-pressed', String(isTH()));
    // theatre toggle only visible when fullscreen-mode is active
    thBtn.style.display = isFS() ? '' : 'none';
    if (!isFS() && isTH()) body.classList.remove('theatre-mode'); // disable theatre if fullscreen turned off
  }

  // Toggle fullscreen-mode class (not the browser fullscreen API)
  fsBtn.addEventListener('click', () => {
    body.classList.toggle('fullscreen-mode');
    applyUI();
  });

  // Toggle theatre (only when fullscreen active)
  thBtn.addEventListener('click', () => {
    if (!isFS()) return;
    body.classList.toggle('theatre-mode');
    applyUI();
  });

  // keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // ignore typing in inputs/areas
    if (e.target && /input|textarea|select/i.test(e.target.tagName)) return;
    if (e.key === 'f' || e.key === 'F') { e.preventDefault(); fsBtn.click(); }
    if (e.key === 't' || e.key === 'T') { e.preventDefault(); thBtn.click(); }
    if (e.key === 'Escape') {
      body.classList.remove('theatre-mode', 'fullscreen-mode');
      applyUI();
    }
  });

  // On load: ensure theatre button visibility state
  applyUI();

  /* Extra: Fix for YouTube iframe embeds served with a fixed height attribute:
     - Some embeds include height attributes in HTML. The CSS uses aspect-ratio
       to restore correct proportions. But if you embed via markdown with width/height
       attributes inlined, browsers may still respect them. We remove height attributes
       on iframes inside .content to be safe (only for this project).
  */
  function sanitizeIframes() {
    try {
      const root = document.querySelector('.content') || document.querySelector('main');
      if (!root) return;
      const iframes = root.querySelectorAll('iframe');
      iframes.forEach(iframe => {
        // only touch external-media iframes (youtube/vimeo/etc.)
        const src = iframe.getAttribute('src') || '';
        if (src.includes('youtube') || src.includes('vimeo') || src.includes('player')) {
          iframe.removeAttribute('height');
          iframe.style.height = 'auto';
          iframe.style.width = '100%';
          iframe.style.maxWidth = '100%';
          // modern browsers: add aspect-ratio if not present
          if (!iframe.style.aspectRatio && !iframe.getAttribute('style')?.includes('aspect-ratio')) {
            iframe.style.aspectRatio = '16 / 9';
          }
        }
      });
    } catch (e) { /* silent */ }
  }

  // Run sanitize now and again after images/media lazy-load
  sanitizeIframes();
  window.addEventListener('load', sanitizeIframes);
  // for dynamic content (if your site hydrates) - observe mutations lightly
  const observer = new MutationObserver((mutations) => {
    let changed = false;
    for (const m of mutations) if (m.addedNodes && m.addedNodes.length) { changed = true; break; }
    if (changed) sanitizeIframes();
  });
  const croot = document.querySelector('.content') || document.querySelector('main');
  if (croot) observer.observe(croot, { childList: true, subtree: true });
})();
</script>


  </body>
</html>
