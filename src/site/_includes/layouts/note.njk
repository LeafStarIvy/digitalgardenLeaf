---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>

    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.head %}{% include imp %}{% endfor %}

    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    <button class="fullscreen-btn" id="fullscreenBtn" aria-pressed="false" title="Toggle Focus Mode">
      <svg class="fs-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" aria-hidden="true"><path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M16 3h3a2 2 0 0 1 2 2v3"/><path d="M8 21H5a2 2 0 0 1-2-2v-3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/></svg>
      <span class="fs-label">Focus Mode</span>
    </button>

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    <!-- Unified galaxy skybox (same as index) -->
    <div class="galaxy-skybox" id="galaxySkybox" aria-hidden="true">
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--mid"></div>
      <div class="nebula nebula--front"></div>
      <div id="shootingStarContainer" class="shooting-stars" aria-hidden="true"></div>
    </div>

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title" data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">
            {% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}
          </h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.notes.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}
    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}

    {% include "components/particlesScript.njk" %}

{% extends "layouts/base.njk" %}
{% block content %}
<main class="content cm-s-obsidian {{contentClasses}}">
  {{ content | safe }}
</main>

{# --- Immersive UI (always in DOM, only visible when active) --- #}
<div class="dg-controls" aria-label="Display controls">
  <button id="dg-toggle-fs" class="dg-btn dg-btn--fullscreen" aria-pressed="false" aria-label="Toggle fullscreen">
    <span class="label">Fullscreen</span>
    <!-- inline lucide: maximize-2 -->
    <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M15 3h6v6"/><path d="M21 3l-7 7"/><path d="M9 21H3v-6"/><path d="M3 21l7-7"/></svg>
  </button>

  <button id="dg-toggle-theatre" class="dg-btn dg-btn--theatre" aria-pressed="false" aria-label="Toggle theatre" hidden>
    <span class="label">Theatre</span>
    <!-- inline lucide: film -->
    <svg viewBox="0 0 24 24" aria-hidden="true"><rect x="2" y="4" width="20" height="16" rx="2"/><path d="M7 4v16"/><path d="M17 4v16"/><path d="M2 8h20"/><path d="M2 16h20"/></svg>
  </button>
</div>

<!-- Cinematic overlays (behind content, above stars/background) -->
<div class="dg-ambient" aria-hidden="true"></div>
<div class="dg-vignette" aria-hidden="true"></div>
<div class="dg-curtains" aria-hidden="true"></div>
<div class="dg-noise" aria-hidden="true"></div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
(function(){
  const body = document.body;
  const fsBtn = document.getElementById('dg-toggle-fs');
  const thBtn = document.getElementById('dg-toggle-theatre');
  const ambientRoot = document.documentElement;

  function updateButtons(){
    const isFS = body.classList.contains('dg-fullscreen');
    const isTH = body.classList.contains('dg-theatre');
    fsBtn.setAttribute('aria-pressed', String(isFS));
    thBtn.setAttribute('aria-pressed', String(isTH));
    thBtn.hidden = !isFS;
    // Swap fullscreen icon
    fsBtn.querySelector('svg').innerHTML = isFS
      ? '<path d="M9 3H3v6"/><path d="M3 3l7 7"/><path d="M15 21h6v-6"/><path d="M21 21l-7-7"/>'
      : '<path d="M15 3h6v6"/><path d="M21 3l-7 7"/><path d="M9 21H3v-6"/><path d="M3 21l7-7"/>';
  }

  function setAmbientFromMedia(el){
    // Try to estimate ambient color from a <video> or <img>
    try {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d', { willReadFrequently: true });
      if (!ctx) return;

      const sample = () => {
        const w = 64, h = 36; // tiny sample
        canvas.width = w; canvas.height = h;
        ctx.drawImage(el, 0, 0, w, h);
        const { data } = ctx.getImageData(0, 0, w, h);
        let r=0,g=0,b=0, count=0;
        for (let i=0; i<data.length; i+=4) {
          const R=data[i], G=data[i+1], B=data[i+2];
          // light bias to avoid dark frames dominating
          const lum = 0.2126*R + 0.7152*G + 0.0722*B;
          if (lum > 24) { r+=R; g+=G; b+=B; count++; }
        }
        if (count) {
          r=Math.round(r/count); g=Math.round(g/count); b=Math.round(b/count);
          ambientRoot.style.setProperty('--dg-ambient-rgb', `${r},${g},${b}`);
        }
      };

      if (el.tagName === 'VIDEO') {
        // video frames can be CORS-tainted â€” ignore errors gracefully
        const go = () => { try { sample(); } catch(_){} };
        if (el.readyState >= 2) go(); else el.addEventListener('loadeddata', go, { once:true });
      } else if (el.complete) {
        sample();
      } else {
        el.addEventListener('load', sample, { once:true });
      }
    } catch (_) { /* keep default */ }
  }

  function computeAmbientColor(){
    // Prefer a prominent <video>, else first content image
    const root = document.querySelector('main.content') || document.querySelector('main');
    if (!root) return;
    const vid = root.querySelector('video');
    const img = root.querySelector('img');
    setAmbientFromMedia(vid || img || {});
  }

  // Toggle handlers
  fsBtn.addEventListener('click', () => {
    body.classList.toggle('dg-fullscreen');
    if (!body.classList.contains('dg-fullscreen')) {
      body.classList.remove('dg-theatre');
    }
    updateButtons();
  });

  thBtn.addEventListener('click', () => {
    body.classList.add('dg-fullscreen'); // theatre implies fullscreen
    body.classList.toggle('dg-theatre');
    if (body.classList.contains('dg-theatre')) {
      computeAmbientColor();
    }
    updateButtons();
  });

  // Keyboard shortcuts: f = fullscreen, t = theatre (if fs)
  window.addEventListener('keydown', (e) => {
    if (['INPUT','TEXTAREA'].includes((e.target && e.target.tagName) || '')) return;
    if (e.key.toLowerCase() === 'f') { e.preventDefault(); fsBtn.click(); }
    if (e.key.toLowerCase() === 't') {
      if (!body.classList.contains('dg-fullscreen')) return;
      e.preventDefault(); thBtn.click();
    }
  });

  // First paint
  updateButtons();
})();
</script>
{% endblock %}


  </body>
</html>
