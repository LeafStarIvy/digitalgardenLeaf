---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>

    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.head %}{% include imp %}{% endfor %}

    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    <button class="fullscreen-btn" id="fullscreenBtn" aria-pressed="false" title="Toggle Focus Mode">
      <svg class="fs-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" aria-hidden="true"><path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M16 3h3a2 2 0 0 1 2 2v3"/><path d="M8 21H5a2 2 0 0 1-2-2v-3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/></svg>
      <span class="fs-label">Focus Mode</span>
    </button>

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    <!-- Unified galaxy skybox (same as index) -->
    <div class="galaxy-skybox" id="galaxySkybox" aria-hidden="true">
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--mid"></div>
      <div class="nebula nebula--front"></div>
      <div id="shootingStarContainer" class="shooting-stars" aria-hidden="true"></div>
    </div>

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title" data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">
            {% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}
          </h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.notes.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}
    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}

    {% include "components/particlesScript.njk" %}

{# ------------------------
  THEATER MODE (paste into note.njk ABOVE {{ content }})
  - Single-file JS. No DOM moves/cloning.
  ------------------------- #}

<!-- fixed toggle and backdrop/exit controls -->
<button id="tg-toggle" class="tg-toggle" aria-pressed="false" aria-label="Enter theater mode">ðŸŽ¬</button>
<div id="tg-backdrop" class="tg-backdrop" aria-hidden="true"></div>
<button id="tg-exit" class="tg-exit" aria-hidden="true" aria-label="Exit theater mode">âœ–</button>

<!-- note content (keep exactly as you already have it) -->
<article id="note-root" class="note-root">
  {{ content | safe }}
</article>

<script>
/* THEATER MODE - plain, defensive JS */
document.addEventListener('DOMContentLoaded', () => {
  const body = document.body;
  const toggle = document.getElementById('tg-toggle');
  const exitBtn = document.getElementById('tg-exit');
  const backdrop = document.getElementById('tg-backdrop');
  const note = document.getElementById('note-root');
  if (!toggle || !exitBtn || !backdrop || !note) return;

  let isOpen = false;
  let saved = { transform: '', transition: '', position: '', zIndex: '' };

  // helper to compute transform to center & scale
  function computeTransformForCenter(rect) {
    const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

    // target width for the "movie screen" (clamped)
    const targetWidth = Math.min(Math.round(vw * 0.92), 1400);
    const minScale = 0.6;
    const scale = Math.max(minScale, targetWidth / Math.max(rect.width, 1));

    const noteCenterX = rect.left + rect.width / 2;
    const noteCenterY = rect.top + rect.height / 2;
    const viewportCenterX = vw / 2;
    const viewportCenterY = vh / 2;

    const translateX = Math.round(viewportCenterX - noteCenterX);
    const translateY = Math.round(viewportCenterY - noteCenterY);

    return { translateX, translateY, scale };
  }

  function openTheater() {
    if (isOpen) return;
    isOpen = true;
    toggle.setAttribute('aria-pressed', 'true');

    // Save original inline styles to restore later
    saved.transform = note.style.transform || '';
    saved.transition = note.style.transition || '';
    saved.position = note.style.position || '';
    saved.zIndex = note.style.zIndex || '';

    // Ensure we measure the element in its natural position (no transform)
    note.style.transition = 'none';
    note.style.transform = saved.transform || '';
    // force reflow
    const rect = note.getBoundingClientRect();

    // compute desired transform
    const { translateX, translateY, scale } = computeTransformForCenter(rect);

    // prepare visual changes (no DOM moves or cloning)
    note.style.willChange = 'transform, box-shadow';
    // z-index must be above the backdrop; position: relative ensures z-index applies
    note.style.position = 'relative';
    note.style.zIndex = '10002';
    note.style.pointerEvents = 'auto';

    // enable backdrop and exit button
    backdrop.removeAttribute('aria-hidden');
    exitBtn.removeAttribute('aria-hidden');

    // lock scrolling (simple and stable)
    document.documentElement.style.overflow = 'hidden';
    document.body.style.overflow = 'hidden';

    // animate transform on next frame
    requestAnimationFrame(() => {
      note.style.transition = 'transform 680ms cubic-bezier(.2,.9,.28,1), box-shadow 420ms ease';
      note.style.transformOrigin = 'center center';
      // the transform visually recenters and scales the current element
      note.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
      // cinematic shadow
      note.style.boxShadow = '0 60px 140px rgba(0,0,0,0.95), 0 14px 40px rgba(0,0,0,0.6), inset 0 0 90px rgba(255,255,255,0.02)';
      // body-level class triggers backdrop, fading out UI
      body.classList.add('tg-active');
    });

    // attach resize handler to keep centered (debounced)
    window.addEventListener('resize', onResize);
    window.addEventListener('orientationchange', onResize);
  }

  function closeTheater() {
    if (!isOpen) return;
    isOpen = false;
    toggle.setAttribute('aria-pressed', 'false');

    // reverse visual changes
    note.style.transform = saved.transform || '';
    note.style.boxShadow = '';

    // remove body class so backdrop fades
    body.classList.remove('tg-active');

    // hide backdrop & exit
    backdrop.setAttribute('aria-hidden', 'true');
    exitBtn.setAttribute('aria-hidden', 'true');

    // restore scrolling & inline styles after the animation completes
    setTimeout(() => {
      document.documentElement.style.overflow = '';
      document.body.style.overflow = '';

      note.style.transition = saved.transition || '';
      note.style.willChange = '';
      note.style.position = saved.position || '';
      note.style.zIndex = saved.zIndex || '';
    }, 720);

    window.removeEventListener('resize', onResize);
    window.removeEventListener('orientationchange', onResize);
  }

  // simple debounced resize -> recompute transform using natural rect
  let _resizeTimer = null;
  function onResize() {
    if (!isOpen) return;
    clearTimeout(_resizeTimer);
    _resizeTimer = setTimeout(() => {
      // measure natural rect (temporarily disable transition & transform to measure position)
      const prevTransition = note.style.transition;
      const prevTransform = note.style.transform;
      note.style.transition = 'none';
      note.style.transform = prevTransform || ''; // ensure transformed state is present but measure natural layout
      // To get natural (untransformed) layout we temporarily clear transform:
      note.style.transform = '';
      // force reflow
      const rect = note.getBoundingClientRect();
      const { translateX, translateY, scale } = computeTransformForCenter(rect);

      // reapply transform with a shorter animation to recenter smoothly
      requestAnimationFrame(() => {
        note.style.transition = 'transform 360ms cubic-bezier(.2,.9,.28,1)';
        note.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
      });

      // restore transition variable after a short delay
      setTimeout(() => {
        note.style.transition = prevTransition || '';
      }, 480);
    }, 120);
  }

  // events
  toggle.addEventListener('click', () => (isOpen ? closeTheater() : openTheater()));
  exitBtn.addEventListener('click', closeTheater);
  backdrop.addEventListener('click', closeTheater);
  window.addEventListener('keyup', (ev) => { if (ev.key === 'Escape') closeTheater(); });

  // Accessibility: if user tabs to exit, keep focus usable
  toggle.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') toggle.click(); });

});
</script>


  </body>
</html>
