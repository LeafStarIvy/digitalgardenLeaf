---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>

    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.head %}{% include imp %}{% endfor %}

    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    <!-- Unified galaxy skybox (same as index) -->
    <div class="galaxy-skybox" id="galaxySkybox" aria-hidden="true">
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--mid"></div>
      <div class="nebula nebula--front"></div>
      <div id="shootingStarContainer" class="shooting-stars" aria-hidden="true"></div>
    </div>

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title" data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">
            {% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}
          </h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.notes.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.notes.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}
    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.notes.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}

    {% include "components/particlesScript.njk" %}

{# --- View controls (top-right) ---}
<div class="dg-viewbar" id="dg-viewbar" role="group" aria-label="View controls">
  <button id="dg-fullscreen-toggle" class="dg-btn" aria-pressed="false" title="Fullscreen (F)">
    <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M7 3h4v2H9v2H7V3Zm10 0v4h-2V5h-2V3h4ZM7 17v4h4v-2H9v-2H7Zm8 2v2h4v-4h-2v2h-2Z"/></svg>
  </button>

  <button id="dg-theatre-toggle" class="dg-btn dg-btn--theatre" aria-pressed="false" title="Theatre (T)" hidden>
    <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M4 6h16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2Zm1 2v8h14V8H5Z"/></svg>
  </button>
</div>

{# --- Theatre overlays (kept in DOM but inactive until theater toggled) ---}
<div class="theatre-vignette" aria-hidden="true"></div>
<div class="theatre-side-light--left" aria-hidden="true"></div>
<div class="theatre-side-light--right" aria-hidden="true"></div>
<div class="theatre-grain" aria-hidden="true"></div>

<script>
(function() {
  const body = document.body;
  const fsBtn = document.getElementById('dg-fullscreen-toggle');
  const thBtn = document.getElementById('dg-theatre-toggle');

  function setButtonState() {
    const isFS = body.classList.contains('fullscreen-mode');
    const isTH = body.classList.contains('theatre-mode');
    fsBtn.setAttribute('aria-pressed', String(isFS));
    thBtn.setAttribute('aria-pressed', String(isTH));
    thBtn.hidden = !isFS;
  }

  function makeEmbedsResponsive() {
    // Find iframes that are likely YouTube or other video embeds and
    // remove inline height attributes that break aspect ratio.
    // Then set style attributes that keep them 16:9 and width:100%.
    try {
      const root = document.querySelector('main.content') || document.querySelector('main') || document.body;
      const iframes = Array.from(root.querySelectorAll('iframe, embed, object, video'));
      iframes.forEach((el) => {
        // Do not touch excalidraw containers or elements with class we explicitly want to preserve
        if (el.classList.contains('excalidraw-embed') || el.classList.contains('excalidraw-container')) return;
        // If element is an iframe to youtube or likely a video, normalize it
        const src = (el.getAttribute && el.getAttribute('src')) || '';
        const isVideoEmbed = /youtube\.com|youtu\.be|vimeo\.com|player\.vimeo|wistia|jwplayer|plyr/i.test(src) || el.tagName.toLowerCase() === 'video';
        if (isVideoEmbed) {
          // remove inline height attributes that cause distortion
          try { el.removeAttribute('height'); } catch(e) {}
          // apply style directly as an extra-safety fallback
          el.style.width = '100%';
          el.style.height = 'auto';
          el.style.maxWidth = '100%';
          // browsers honor aspect-ratio; this helps avoid broken heights
          el.style.aspectRatio = '16/9';
          el.style.objectFit = 'cover';
          el.style.display = 'block';
          el.style.margin = '1rem auto';
        }
      });
    } catch (err) {
      // fail silently â€” nothing catastrophic if this doesn't run
      console.warn('embed resize failed', err);
    }
  }

  function toggleFullscreen() {
    body.classList.toggle('fullscreen-mode');
    // When entering fullscreen, ensure theatre is off (until user toggles)
    if (!body.classList.contains('fullscreen-mode')) body.classList.remove('theatre-mode');
    // Make embedded videos responsive immediately after toggling
    makeEmbedsResponsive();
    setButtonState();
  }

  function toggleTheatre() {
    // Only allow theatre when we are in fullscreen
    if (!body.classList.contains('fullscreen-mode')) return;
    body.classList.toggle('theatre-mode');
    setButtonState();
    // Ensure embeds still correct
    makeEmbedsResponsive();
  }

  fsBtn.addEventListener('click', toggleFullscreen);
  thBtn.addEventListener('click', toggleTheatre);

  // Keyboard: F = fullscreen, T = theatre (only when FS), Esc clears both
  document.addEventListener('keydown', function(e) {
    if (e.target && /input|textarea|select/i.test(e.target.tagName)) return;
    const key = (e.key || '').toLowerCase();
    if (key === 'f') { e.preventDefault(); toggleFullscreen(); }
    if (key === 't') { e.preventDefault(); toggleTheatre(); }
    if (e.key === 'Escape') {
      body.classList.remove('theatre-mode');
      body.classList.remove('fullscreen-mode');
      setButtonState();
    }
  });

  // Initial run to ensure any existing embeds are normalized on page load
  document.addEventListener('DOMContentLoaded', function() {
    setButtonState();
    makeEmbedsResponsive();
  });

  // Also run mutation observer to catch lazy-loaded embeds (optional)
  const root = document.querySelector('main.content') || document.querySelector('main') || document.body;
  if (root) {
    const mo = new MutationObserver((mutations) => {
      // small debounce by batch-processing
      makeEmbedsResponsive();
    });
    mo.observe(root, { childList: true, subtree: true });
  }
})();
</script>


  </body>
</html>
