<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>

    {% include "components/pageheader.njk" %}
    {% for imp in dynamics.common.head %}{% include imp %}{% endfor %}
    {% for imp in dynamics.index.head %}{% include imp %}{% endfor %}

    <link rel="stylesheet" href="/styles/custom.css">
  </head>

  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    <!-- Galaxy Skybox: the particle script will create canvases inside this -->
    <div class="galaxy-skybox" id="galaxySkybox" aria-hidden="true">
      <!-- decorative nebula layers for parallax (pure CSS; moved visually behind content) -->
      <div class="nebula nebula--back"></div>
      <div class="nebula nebula--mid"></div>
      <div class="nebula nebula--front"></div>
      <!-- container for DOM shooting-star elements (script will append) -->
      <div id="shootingStarContainer" class="shooting-stars" aria-hidden="true"></div>
    </div>

    {% include "components/notegrowthhistory.njk" %}
    {% if settings.dgShowFileTree !== true %}
      {% include "components/navbar.njk" %}
    {% else %}
      {% include "components/filetree.njk" %}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {% include "components/searchContainer.njk" %}
    {% endif %}

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header class="site-header">
        {% if settings.dgShowInlineTitle === true %}
          <h1 class="site-title">{{ noteTitle }}</h1>
        {% endif %}

        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag != 'note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">#{{tag}}</a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
        </div>

        {% for imp in dynamics.common.header %}{% include imp %}{% endfor %}
        {% for imp in dynamics.index.header %}{% include imp %}{% endfor %}
      </header>

      {% for imp in dynamics.common.beforeContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.index.beforeContent %}{% include imp %}{% endfor %}

      <article class="garden-article">
        {{ content | hideDataview | taggify | link | safe }}
      </article>

      {% for imp in dynamics.common.afterContent %}{% include imp %}{% endfor %}
      {% for imp in dynamics.index.afterContent %}{% include imp %}{% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true %}
      {% include "components/sidebar.njk" %}
    {% endif %}

    {% if settings.dgLinkPreview === true %}
      {% include "components/linkPreview.njk" %}
    {% endif %}

    {% for imp in dynamics.common.footer %}{% include imp %}{% endfor %}
    {% for imp in dynamics.index.footer %}{% include imp %}{% endfor %}
    {% include "components/lucideIcons.njk" %}

{% include "components/particlesScript.njk" %}

<!-- PARTICLES TOGGLE: put this AFTER your particles include -->
<button id="toggleParticlesBtn" aria-label="Toggle galaxy background" title="Toggle galaxy background (particles)">
  <span class="visually-hidden">Toggle particles</span>
</button>

<style>
  /* star button - keep in custom.scss if you prefer */
  #toggleParticlesBtn {
    position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    width: 54px;
    height: 54px;
    border: none;
    padding: 0;
    cursor: pointer;
    z-index: 1200;
    display: inline-block;
    background: linear-gradient(180deg,#f6d86b,#e7a927);
    border-radius: 6px;
    box-shadow: 0 6px 18px rgba(0,0,0,0.25);
    transition: transform .16s ease, opacity .16s ease;
    -webkit-tap-highlight-color: transparent;
    /* 4-point-ish star */
    clip-path: polygon(
      50% 0%,
      62% 38%,
      100% 38%,
      69% 62%,
      81% 100%,
      50% 76%,
      19% 100%,
      31% 62%,
      0% 38%,
      38% 38%
    );
  }
  #toggleParticlesBtn:hover { transform: scale(1.06) rotate(3deg); }
  #toggleParticlesBtn.off {
    background: linear-gradient(180deg,#9aa0a6,#6f7478);
    opacity: .9;
  }
  /* small accessibility helper (hidden for sighted users) */
  .visually-hidden { position: absolute; left: -9999px; top: auto; width: 1px; height: 1px; overflow: hidden; }
</style>

<script>
(function () {
  // Strict but tolerant: guard everything in try/catch
  try {
    const btn = document.getElementById('toggleParticlesBtn');
    const skyboxId = 'galaxySkybox';
    let skybox = document.getElementById(skyboxId);

    // --- Utility: store snapshots for later re-init ---
    const _saved = {
      pjsConfig: null,
      tsConfig: null,
      originals: {}
    };

    // Save original API references if present
    _saved.originals.particlesJS = window.particlesJS;
    _saved.originals.tsParticles = window.tsParticles;
    _saved.originals.pJSDom = window.pJSDom && Array.isArray(window.pJSDom) ? window.pJSDom.slice() : null;

    // Try to extract the active config from particles.js or tsParticles (if available)
    try {
      if (window.pJSDom && window.pJSDom.length && window.pJSDom[0].pJS) {
        // pJSDom[0].pJS.options is often the configuration object
        const maybe = window.pJSDom[0].pJS.options || window.pJSDom[0].pJS;
        try { _saved.pjsConfig = JSON.parse(JSON.stringify(maybe)); } catch(e) { _saved.pjsConfig = maybe; }
      }
    } catch(e){ /* ignore */ }

    try {
      if (window.tsParticles && typeof window.tsParticles.dom === 'function') {
        const dom = window.tsParticles.dom();
        if (dom && dom.length) {
          // container.options or container.sourceOptions
          const maybe = dom[0].options || dom[0].sourceOptions || dom[0];
          try { _saved.tsConfig = JSON.parse(JSON.stringify(maybe)); } catch(e) { _saved.tsConfig = maybe; }
        }
      }
    } catch(e){ /* ignore */ }

    // Local storage key
    const LS_KEY = 'particlesEnabled';

    // If user has no preference, default to enabled (true)
    if (localStorage.getItem(LS_KEY) === null) {
      localStorage.setItem(LS_KEY, 'true');
    }

    // --- Aggressive destroy function: remove everything particle-related, stop animation loops ---
    function destroyParticlesCompletely() {
      console.log('[ParticlesToggle] Destroying particles (aggressive)');
      // 1) particles.js (pJSDom)
      try {
        if (window.pJSDom && window.pJSDom.length) {
          window.pJSDom.forEach(inst => {
            try {
              if (inst && inst.pJS && inst.pJS.fn && inst.pJS.fn.vendors && typeof inst.pJS.fn.vendors.destroypJS === 'function') {
                inst.pJS.fn.vendors.destroypJS();
              }
            } catch(e){}
          });
        }
        // clear the reference array
        window.pJSDom = [];
      } catch(e) { console.warn('[ParticlesToggle] pJSDom destroy error', e); }

      // 2) tsParticles
      try {
        if (window.tsParticles && typeof window.tsParticles.dom === 'function') {
          const dom = window.tsParticles.dom();
          if (dom && dom.length) {
            dom.forEach(container => {
              try { container.destroy(); } catch(e){/*ignore*/ }
            });
          }
        }
      } catch(e) { console.warn('[ParticlesToggle] tsParticles destroy error', e); }

      // 3) remove canvas elements under the skybox (definitive)
      try {
        document.querySelectorAll('#' + skyboxId + ' canvas').forEach(c => {
          // try to stop context animation if possible
          try {
            const ctx = c.getContext && c.getContext('2d');
            if (ctx && ctx.canvas) { /* nothing else to call */ }
          } catch(e){}
          c.remove();
        });
      } catch(e) { /* ignore */ }

      // 4) clear shooting stars container (DOM elements & possible intervals)
      try {
        const shoot = document.getElementById('shootingStarContainer');
        if (shoot) { shoot.innerHTML = ''; }
      } catch(e){}

      // 5) pause/disable heavy CSS decorations (nebula) — stops GPU/CSS animations
      try {
        document.querySelectorAll('.galaxy-skybox .nebula, #' + skyboxId + ' .nebula, .nebula').forEach(el => {
          // preserve layout but stop animations and backgrounds
          el.style.animation = 'none';
          el.style.transition = 'none';
          // If nebula uses background-images/filters that are expensive, neutralize them:
          el.style.backgroundImage = 'none';
          el.style.filter = 'none';
          el.style.willChange = 'auto';
        });
      } catch(e){}

      // 6) Prevent future automatic re-initialization by overriding init functions — but keep originals to allow restore
      try {
        if (typeof window.particlesJS === 'function') {
          if (!window._particlesToggle_original_particlesJS) {
            window._particlesToggle_original_particlesJS = window.particlesJS;
          }
          // replace with harmless stub
          window.particlesJS = function() { console.log('[ParticlesToggle] particlesJS call blocked (particles disabled)'); };
          window.particlesJS.load = function() { console.log('[ParticlesToggle] particlesJS.load blocked (particles disabled)'); };
        }
      } catch(e){}

      try {
        if (window.tsParticles) {
          if (!window._particlesToggle_original_tsParticles) {
            window._particlesToggle_original_tsParticles = window.tsParticles;
          }
          // block load and dom functions
          window.tsParticles.load = function() { console.log('[ParticlesToggle] tsParticles.load blocked (particles disabled)'); return Promise.resolve(null); };
          window.tsParticles.dom = function() { return []; };
        }
      } catch(e){}

      // 7) hostname flag
      window.__particlesDisabledByToggle = true;
    }

    // --- Reinit function: attempt to restore original API & re-create particles using saved config (if possible) ---
    function enableParticlesAgain() {
      console.log('[ParticlesToggle] Enabling particles (attempt restore)');
      // 1) restore original functions if we hijacked them
      try {
        if (window._particlesToggle_original_particlesJS) {
          window.particlesJS = window._particlesToggle_original_particlesJS;
          // restore load if present on original object
          if (window._particlesToggle_original_particlesJS.load) {
            window.particlesJS.load = window._particlesToggle_original_particlesJS.load;
          }
          delete window._particlesToggle_original_particlesJS;
        }
      } catch(e){}

      try {
        if (window._particlesToggle_original_tsParticles) {
          window.tsParticles = window._particlesToggle_original_tsParticles;
          delete window._particlesToggle_original_tsParticles;
        }
      } catch(e){}

      window.__particlesDisabledByToggle = false;

      // 2) Attempt to re-initialize using saved config, prefer particles.js style first
      const skyCaptured = document.getElementById(skyboxId);
      if (!skyCaptured) {
        console.warn('[ParticlesToggle] No skybox element to init into');
        return;
      }

      // If we have a saved particles.js config object, try that form: particlesJS('id', options)
      if (_saved.pjsConfig && typeof window.particlesJS === 'function') {
        try {
          window.particlesJS(skyboxId, _saved.pjsConfig);
          console.log('[ParticlesToggle] Reinitialized particlesJS using saved config');
          return;
        } catch(e) {
          console.warn('[ParticlesToggle] Could not reinit particlesJS with saved config', e);
        }
      }

      // If we have a saved tsParticles config, try tsParticles.load
      if (_saved.tsConfig && window.tsParticles && typeof window.tsParticles.load === 'function') {
        try {
          // tsParticles.load returns a Promise
          window.tsParticles.load(skyboxId, _saved.tsConfig).then(() => {
            console.log('[ParticlesToggle] Reinitialized tsParticles using saved config');
          }).catch(e => console.warn('[ParticlesToggle] tsParticles reinit error', e));
          return;
        } catch(e) {
          console.warn('[ParticlesToggle] Could not reinit tsParticles with saved config', e);
        }
      }

      // If we couldn't find any saved config, fall back to attempting to re-run original script by forcing a reload.
      // This is the reliable fallback because many themes initialize particles with inline config during initial page load.
      try {
        console.warn('[ParticlesToggle] No saved config found. Reloading page to restore original particle initialization.');
        // set a small delay so UI updates first
        setTimeout(() => location.reload(), 120);
      } catch(e) {
        console.error('[ParticlesToggle] Unable to reload to reinit particles', e);
      }
    }

    // --- UI helpers ---
    function setButtonState(enabled) {
      if (!btn) return;
      if (enabled) {
        btn.classList.remove('off');
        btn.setAttribute('aria-pressed', 'true');
        btn.title = 'Particles: ON — click to turn OFF';
      } else {
        btn.classList.add('off');
        btn.setAttribute('aria-pressed', 'false');
        btn.title = 'Particles: OFF — click to turn ON';
      }
    }

    // --- Initialize based on stored preference ---
    function applyStoredPreference() {
      const pref = localStorage.getItem(LS_KEY);
      const enabled = (pref === 'true');
      setButtonState(enabled);

      if (!enabled) {
        // user previously turned OFF -> aggressively destroy
        destroyParticlesCompletely();
      } else {
        // ensure not disabled by flag; if currently destroyed by earlier code, attempt to re-enable
        // If library exists and pJSDom/tsParticles are empty, try a re-init (we rely on saved config)
        const hasPjs = window.pJSDom && window.pJSDom.length;
        const hasTs = window.tsParticles && typeof window.tsParticles.dom === 'function' && window.tsParticles.dom().length;
        if (!hasPjs && !hasTs) {
          // try re-enabling gracefully
          enableParticlesAgain();
        } else {
          // particles already running — nothing to do
          console.log('[ParticlesToggle] Particles appear active on load.');
        }
      }
    }

    // --- Button click handler toggles and persists ---
    btn.addEventListener('click', function () {
      const nowEnabled = localStorage.getItem(LS_KEY) !== 'true';
      if (nowEnabled) {
        // user is turning ON
        localStorage.setItem(LS_KEY, 'true');
        setButtonState(true);
        enableParticlesAgain();
      } else {
        // user is turning OFF
        localStorage.setItem(LS_KEY, 'false');
        setButtonState(false);
        // Very important: run the aggressive destroy immediately
        destroyParticlesCompletely();
        // Wait a moment and force garbage-collection-friendly cleanup (remove canvases again)
        setTimeout(() => {
          try { document.querySelectorAll('#' + skyboxId + ' canvas').forEach(c => c.remove()); } catch(e){}
        }, 200);
      }
    });

    // Apply preference on DOM ready
    document.addEventListener('DOMContentLoaded', applyStoredPreference);
    // Also attempt to apply immediately (in case DOMContentLoaded already fired)
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
      applyStoredPreference();
    }

    // Expose small debug API on window if needed
    window._particlesToggle = {
      destroy: destroyParticlesCompletely,
      enable: enableParticlesAgain,
      saved: _saved,
      prefsKey: LS_KEY
    };

  } catch (err) {
    console.error('[ParticlesToggle] Unexpected error:', err);
  }
})();
</script>




<div class="floating-buttons">
  <a href="https://chat.openai.com" target="_blank" title="ChatGPT">
    <img src="/img/icons/chatgpt.png" alt="ChatGPT">
  </a>
  <a href="https://claude.ai" target="_blank" title="Claude">
    <img src="/img/icons/claude.png" alt="Claude">
  </a>
  <a href="https://youtube.com" target="_blank" title="YouTube">
    <img src="/img/icons/youtube.png" alt="YouTube">
  </a>
</div>

  </body>
</html>
