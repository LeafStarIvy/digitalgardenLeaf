<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.index.head %}
      {% include imp %}
    {% endfor %}
  </head>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">
  

    {%include "components/notegrowthhistory.njk"%}
    {% if settings.dgShowFileTree !== true %}
      {%include "components/navbar.njk"%}
    {%else%}
      {%include "components/filetree.njk"%}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}
    <main class="content cm-s-obsidian {{contentClasses}}">
      <header>
      {% if settings.dgShowInlineTitle === true %}
        <h1>{{ noteTitle  }}</h1>
      {% endif %}
      <div class="header-meta">
        {% if settings.dgShowTags === true and tags %}
          <div class="header-tags">
            {% for tag in tags %}
              {% if tag != 'gardenEntry' and tag !='note' %}
                <a class="tag" onclick="toggleTagSearch(this)">
                  #{{tag}}
                </a>
              {% endif %}
            {% endfor %}
          </div>
        {% endif %}
      </div>
      {% for imp in dynamics.common.header %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.header %}
        {% include imp %}
      {% endfor %}
      </header>
      {% for imp in dynamics.common.beforeContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.beforeContent %}
        {% include imp %}
      {% endfor %}
      {{ content | hideDataview | taggify | link | safe}}
      {% for imp in dynamics.common.afterContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.afterContent %}
        {% include imp %}
      {% endfor %}
    </main>
    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
      {%include "components/sidebar.njk" %}
    {%endif%}
    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.index.footer %}
      {% include imp %}
    {% endfor %}
    {%include "components/lucideIcons.njk"%}
    {% include "components/particlesScript.njk" %}

    <!-- Galaxy Star Field Generator -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const starField = document.getElementById('starField');
        const starCount = window.innerWidth < 768 ? 100 : 200; // Fewer stars on mobile
        
        // Create random stars
        for (let i = 0; i < starCount; i++) {
          const star = document.createElement('div');
          star.className = 'star';
          
          // Random position
          const x = Math.random() * 100;
          const y = Math.random() * 100;
          star.style.left = x + '%';
          star.style.top = y + '%';
          
          // Random size
          const sizeRand = Math.random();
          if (sizeRand < 0.7) {
            star.classList.add('small');
          } else if (sizeRand < 0.9) {
            star.classList.add('medium');
          } else {
            star.classList.add('large');
          }
          
          // Random color (10% chance for colored stars)
          const colorRand = Math.random();
          if (colorRand < 0.03) {
            star.classList.add('golden');
          } else if (colorRand < 0.06) {
            star.classList.add('rose');
          } else if (colorRand < 0.09) {
            star.classList.add('teal');
          }
          
          // Random animation delay
          star.style.animationDelay = Math.random() * 3 + 's';
          
          starField.appendChild(star);
        }
        
        // Add more shooting stars periodically
        setInterval(() => {
          if (Math.random() < 0.3) { // 30% chance every 5 seconds
            const shootingStar = document.createElement('div');
            shootingStar.className = 'shooting-star';
            shootingStar.style.top = Math.random() * 70 + '%';
            shootingStar.style.left = '-10%';
            shootingStar.style.animationDelay = '0s';
            
            document.querySelector('.galaxy-skybox').appendChild(shootingStar);
            
            // Remove after animation
            setTimeout(() => {
              shootingStar.remove();
            }, 8000);
          }
        }, 5000);
      });
    </script>
<div class="galaxy-skybox">
        <!-- Mario stars will be inserted here by JavaScript -->
    </div>

    <script>
        // Enhanced Mario Star Field Generator
        class MarioStarField {
            constructor() {
                this.colors = [
                    { name: '', glow: 'rgba(255, 215, 0, 0.4)' },
                    { name: 'blue', glow: 'rgba(33, 150, 243, 0.4)' },
                    { name: 'cyan', glow: 'rgba(0, 188, 212, 0.4)' },
                    { name: 'purple', glow: 'rgba(156, 39, 176, 0.4)' },
                    { name: 'green', glow: 'rgba(76, 175, 80, 0.4)' },
                    { name: 'pink', glow: 'rgba(233, 30, 99, 0.4)' },
                    { name: 'orange', glow: 'rgba(255, 152, 0, 0.4)' },
                    { name: 'red', glow: 'rgba(244, 67, 54, 0.4)' }
                ];
                
                this.sizes = [
                    { name: 'tiny', weight: 0.15 },
                    { name: 'small', weight: 0.35 },
                    { name: '', weight: 0.35 },
                    { name: 'large', weight: 0.15 }
                ];
                
                this.effects = ['', 'twinkle', 'pulse'];
                this.starField = null;
                this.animationFrameId = null;
            }

            getRandomSize() {
                const random = Math.random();
                let accumulator = 0;
                
                for (const size of this.sizes) {
                    accumulator += size.weight;
                    if (random < accumulator) {
                        return size.name;
                    }
                }
                return '';
            }

            createStar(isFirst = false) {
                const star = document.createElement('div');
                star.className = 'mario-star';
                
                // Add random size
                const size = this.getRandomSize();
                if (size) star.classList.add(size);
                
                // Add random color
                const colorData = this.colors[Math.floor(Math.random() * this.colors.length)];
                if (colorData.name) star.classList.add(colorData.name);
                
                // Add random effect (30% chance)
                if (Math.random() < 0.3) {
                    const effect = this.effects[Math.floor(Math.random() * this.effects.length)];
                    if (effect) star.classList.add(effect);
                }
                
                // First star configuration
                if (isFirst) {
                    star.classList.add('first');
                }
                
                // Random positioning
                const screenHeight = window.innerHeight;
                const startY = Math.random() * screenHeight;
                const drift = (Math.random() - 0.5) * 300; // More dramatic drift
                const endY = Math.max(0, Math.min(screenHeight, startY + drift));
                
                // Set CSS custom properties
                star.style.setProperty('--random-y', `${startY}px`);
                star.style.setProperty('--random-y-end', `${endY}px`);
                star.style.setProperty('--glow-color', colorData.glow);
                
                // Dynamic opacity based on size
                let opacity = 0.5;
                if (size === 'large') opacity = 0.6;
                else if (size === 'small') opacity = 0.4;
                else if (size === 'tiny') opacity = 0.3;
                
                star.style.setProperty('--star-opacity', opacity);
                
                // Random animation delay (0-80 seconds)
                if (!isFirst) {
                    const delay = Math.random() * 80;
                    star.style.animationDelay = `${delay}s`;
                }
                
                // Random animation duration variation (Â±25%)
                const baseDuration = this.getBaseDuration(size);
                const durationVariation = baseDuration * (0.75 + Math.random() * 0.5);
                star.style.animationDuration = `${durationVariation}s`;
                
                return star;
            }

            getBaseDuration(size) {
                switch (size) {
                    case 'large': return 90;
                    case 'small': return 55;
                    case 'tiny': return 40;
                    default: return 70;
                }
            }

            createStarField() {
                const starField = document.createElement('div');
                starField.className = 'mario-star-field';
                
                // Create 12-18 stars for better distribution
                const starCount = Math.floor(Math.random() * 7) + 12;
                
                for (let i = 0; i < starCount; i++) {
                    const star = this.createStar(i === 0);
                    starField.appendChild(star);
                }
                
                return starField;
            }

            init() {
                this.cleanup();
                
                const galaxySkybox = document.querySelector('.galaxy-skybox');
                if (!galaxySkybox) return;
                
                this.starField = this.createStarField();
                galaxySkybox.appendChild(this.starField);
                
                // Schedule next recreation
                this.scheduleRecreation();
            }

            cleanup() {
                if (this.animationFrameId) {
                    cancelAnimationFrame(this.animationFrameId);
                    this.animationFrameId = null;
                }
                
                const existingStarField = document.querySelector('.mario-star-field');
                if (existingStarField) {
                    existingStarField.remove();
                }
            }

            scheduleRecreation() {
                // Recreate stars every 2-3 minutes with some randomness
                const delay = (120 + Math.random() * 60) * 1000;
                
                setTimeout(() => {
                    this.init();
                }, delay);
            }

            handleResize() {
                // Debounced resize handler
                clearTimeout(this.resizeTimeout);
                this.resizeTimeout = setTimeout(() => {
                    this.init();
                }, 300);
            }
        }

        // Initialize the Mario Star Field
        let marioStarField;

        function initMarioStars() {
            if (marioStarField) {
                marioStarField.cleanup();
            }
            
            marioStarField = new MarioStarField();
            marioStarField.init();
        }

        // Start when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initMarioStars);
        } else {
            initMarioStars();
        }

        // Handle window resize
        window.addEventListener('resize', () => {
            if (marioStarField) {
                marioStarField.handleResize();
            }
        });

        // Handle visibility change to optimize performance
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                if (marioStarField) {
                    marioStarField.cleanup();
                }
            } else {
                setTimeout(initMarioStars, 500);
            }
        });
    </script>
  </body>
</html>
