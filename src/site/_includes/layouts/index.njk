<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.index.head %}
      {% include imp %}
    {% endfor %}
  </head>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">
    
    <!-- Galaxy Skybox Background -->
    <div class="galaxy-skybox">
      <div class="star-field" id="starField"></div>
      <div class="cosmic-dust"></div>
      <div class="shooting-star" style="top: 20%; left: -10%; animation-delay: 0s;"></div>
      <div class="shooting-star" style="top: 60%; left: -10%; animation-delay: 3s;"></div>
      <div class="shooting-star" style="top: 80%; left: -10%; animation-delay: 6s;"></div>
    </div>

<div class="galaxy-skybox"></div>
<div class="mario-star-field">
  <div class="mario-star"></div>
  <div class="mario-star large blue"></div>
  <div class="mario-star small cyan"></div>
  <div class="mario-star purple"></div>
  <!-- Add more stars as needed -->
</div>

    {%include "components/notegrowthhistory.njk"%}
    {% if settings.dgShowFileTree !== true %}
      {%include "components/navbar.njk"%}
    {%else%}
      {%include "components/filetree.njk"%}
    {% endif %}
    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}
    <main class="content cm-s-obsidian {{contentClasses}}">
      <header>
      {% if settings.dgShowInlineTitle === true %}
        <h1>{{ noteTitle  }}</h1>
      {% endif %}
      <div class="header-meta">
        {% if settings.dgShowTags === true and tags %}
          <div class="header-tags">
            {% for tag in tags %}
              {% if tag != 'gardenEntry' and tag !='note' %}
                <a class="tag" onclick="toggleTagSearch(this)">
                  #{{tag}}
                </a>
              {% endif %}
            {% endfor %}
          </div>
        {% endif %}
      </div>
      {% for imp in dynamics.common.header %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.header %}
        {% include imp %}
      {% endfor %}
      </header>
      {% for imp in dynamics.common.beforeContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.beforeContent %}
        {% include imp %}
      {% endfor %}
      {{ content | hideDataview | taggify | link | safe}}
      {% for imp in dynamics.common.afterContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.afterContent %}
        {% include imp %}
      {% endfor %}
    </main>
    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
      {%include "components/sidebar.njk" %}
    {%endif%}
    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.index.footer %}
      {% include imp %}
    {% endfor %}
    {%include "components/lucideIcons.njk"%}
    {% include "components/particlesScript.njk" %}

// Enhanced Mario Star Field Generator with Auto-Initialization
(function() {
  'use strict';

  // Configuration
  const CONFIG = {
    starCount: { min: 10, max: 16 },
    colors: ['', 'blue', 'cyan', 'purple', 'green', 'pink', 'orange'],
    sizes: ['small', '', 'large'],
    recreateInterval: 180000, // 3 minutes
    spawnInterval: 8000, // 8 seconds between new stars
    maxActiveStars: 12
  };

  let activeStars = [];
  let starField = null;
  let spawnTimer = null;
  let recreateTimer = null;

  // Enhanced star creation with better randomization
  function createMarioStar(index = 0) {
    const star = document.createElement('div');
    star.className = 'mario-star';
    
    // Random size distribution (more medium stars)
    const sizeRandom = Math.random();
    let size = '';
    if (sizeRandom < 0.2) size = 'small';
    else if (sizeRandom < 0.8) size = '';
    else size = 'large';
    
    if (size) star.classList.add(size);
    
    // Random color (weighted toward gold)
    const colorRandom = Math.random();
    let color = '';
    if (colorRandom > 0.4) { // 60% chance for color
      color = CONFIG.colors[Math.floor(Math.random() * CONFIG.colors.length)];
    }
    if (color) star.classList.add(color);
    
    // Mark first star
    if (index === 0) {
      star.classList.add('first');
    }
    
    // Enhanced positioning with better distribution
    const viewportHeight = window.innerHeight;
    const viewportWidth = window.innerWidth;
    
    // Multi-zone Y positioning for better distribution
    let startY, midY, endY;
    const zone = Math.floor(Math.random() * 3);
    
    switch(zone) {
      case 0: // Top third
        startY = Math.random() * (viewportHeight / 3);
        break;
      case 1: // Middle third
        startY = (viewportHeight / 3) + Math.random() * (viewportHeight / 3);
        break;
      case 2: // Bottom third
        startY = (2 * viewportHeight / 3) + Math.random() * (viewportHeight / 3);
        break;
    }
    
    // Natural drift calculation
    const driftRange = 150;
    midY = startY + (Math.random() * driftRange - driftRange/2);
    endY = startY + (Math.random() * driftRange - driftRange/2);
    
    // Ensure positions stay within viewport
    startY = Math.max(0, Math.min(viewportHeight - 120, startY));
    midY = Math.max(0, Math.min(viewportHeight - 120, midY));
    endY = Math.max(0, Math.min(viewportHeight - 120, endY));
    
    // Set CSS custom properties
    star.style.setProperty('--random-y', `${startY}px`);
    star.style.setProperty('--random-y-mid', `${midY}px`);
    star.style.setProperty('--random-y-end', `${endY}px`);
    
    // Dynamic opacity based on size
    let opacity = 0.5;
    if (size === 'large') opacity = 0.6;
    else if (size === 'small') opacity = 0.4;
    star.style.setProperty('--star-opacity', opacity);
    
    // Staggered delays for natural spawning
    const baseDelay = index * 2; // 2 seconds apart
    const randomDelay = Math.random() * 10; // Up to 10 seconds random
    star.style.animationDelay = `${baseDelay + randomDelay}s`;
    
    // Duration variation for organic feel
    const baseDuration = size === 'large' ? 80 : size === 'small' ? 45 : 60;
    const durationVariation = baseDuration * (0.8 + Math.random() * 0.4);
    star.style.animationDuration = `${durationVariation}s`;
    
    return star;
  }

  // Create initial star field
  function initializeStarField() {
    if (starField) {
      starField.remove();
    }
    
    starField = document.createElement('div');
    starField.className = 'mario-star-field';
    
    const starCount = Math.floor(
      Math.random() * (CONFIG.starCount.max - CONFIG.starCount.min + 1)
    ) + CONFIG.starCount.min;
    
    activeStars = [];
    
    for (let i = 0; i < starCount; i++) {
      const star = createMarioStar(i);
      starField.appendChild(star);
      activeStars.push(star);
    }
    
    return starField;
  }

  // Add single star dynamically
  function addSingleStar() {
    if (!starField || activeStars.length >= CONFIG.maxActiveStars) {
      return;
    }
    
    const star = createMarioStar(activeStars.length);
    starField.appendChild(star);
    activeStars.push(star);
    
    // Remove star after animation completes
    setTimeout(() => {
      if (star.parentNode) {
        star.remove();
        activeStars = activeStars.filter(s => s !== star);
      }
    }, 90000); // 90 seconds max
  }

  // Initialize everything
  function initialize() {
    // Clear existing timers
    if (spawnTimer) clearInterval(spawnTimer);
    if (recreateTimer) clearInterval(recreateTimer);
    
    // Find or create galaxy skybox
    let galaxySkybox = document.querySelector('.galaxy-skybox');
    if (!galaxySkybox) {
      galaxySkybox = document.createElement('div');
      galaxySkybox.className = 'galaxy-skybox';
      document.body.appendChild(galaxySkybox);
    }
    
    // Create star field
    const marioStarField = initializeStarField();
    galaxySkybox.appendChild(marioStarField);
    
    // Set up continuous spawning
    spawnTimer = setInterval(addSingleStar, CONFIG.spawnInterval);
    
    // Set up periodic recreation
    recreateTimer = setInterval(() => {
      const newStarField = initializeStarField();
      galaxySkybox.appendChild(newStarField);
    }, CONFIG.recreateInterval);
  }

  // Auto-initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }

  // Reinitialize on window resize
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(initialize, 1000);
  });

  // Expose global control functions
  window.MarioStars = {
    restart: initialize,
    addStar: addSingleStar,
    getActiveCount: () => activeStars.length
  };

})();

    <!-- Galaxy Star Field Generator -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const starField = document.getElementById('starField');
        const starCount = window.innerWidth < 768 ? 100 : 200; // Fewer stars on mobile
        
        // Create random stars
        for (let i = 0; i < starCount; i++) {
          const star = document.createElement('div');
          star.className = 'star';
          
          // Random position
          const x = Math.random() * 100;
          const y = Math.random() * 100;
          star.style.left = x + '%';
          star.style.top = y + '%';
          
          // Random size
          const sizeRand = Math.random();
          if (sizeRand < 0.7) {
            star.classList.add('small');
          } else if (sizeRand < 0.9) {
            star.classList.add('medium');
          } else {
            star.classList.add('large');
          }
          
          // Random color (10% chance for colored stars)
          const colorRand = Math.random();
          if (colorRand < 0.03) {
            star.classList.add('golden');
          } else if (colorRand < 0.06) {
            star.classList.add('rose');
          } else if (colorRand < 0.09) {
            star.classList.add('teal');
          }
          
          // Random animation delay
          star.style.animationDelay = Math.random() * 3 + 's';
          
          starField.appendChild(star);
        }
        
        // Add more shooting stars periodically
        setInterval(() => {
          if (Math.random() < 0.3) { // 30% chance every 5 seconds
            const shootingStar = document.createElement('div');
            shootingStar.className = 'shooting-star';
            shootingStar.style.top = Math.random() * 70 + '%';
            shootingStar.style.left = '-10%';
            shootingStar.style.animationDelay = '0s';
            
            document.querySelector('.galaxy-skybox').appendChild(shootingStar);
            
            // Remove after animation
            setTimeout(() => {
              shootingStar.remove();
            }, 8000);
          }
        }, 5000);
      });
    </script>
  </body>
</html>
