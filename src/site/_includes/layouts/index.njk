<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.index.head %}
      {% include imp %}
    {% endfor %}
  </head>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">

    <!-- IMMEDIATE THEME AND BACKGROUND INITIALIZATION -->
    <script>
      // Set theme and background immediately to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        const savedBgLight = parseInt(localStorage.getItem('bgIndexLight')) || 0;
        const savedBgDark = parseInt(localStorage.getItem('bgIndexDark')) || 0;
        
        // Default backgrounds (same as in main script)
        const quickBgs = {
          light: [
            'https://images.unsplash.com/photo-1460574283810-2aab119d8511?q=80&w=1463&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.unsplash.com/photo-1469474968028-56623f02e42e?q=80&w=2674&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://wallpapercave.com/wp/wp4793074.jpg',
           'https://images.pexels.com/photos/1037992/pexels-photo-1037992.jpeg',
            'https://images.pexels.com/photos/776656/pexels-photo-776656.jpeg',
            'https://images.pexels.com/photos/354939/pexels-photo-354939.jpeg',
            'https://images.pexels.com/photos/35857/amazing-beautiful-breathtaking-clouds.jpg',
            'https://www.pixelstalk.net/wp-content/uploads/images6/2560x1440-HD-Wallpaper-Free-download-1.png',
            'https://wallpapers.com/images/hd/space-2560x1440-2nhn01rnylds261b.jpg',
            'https://images.pexels.com/photos/2775196/pexels-photo-2775196.jpeg',
            'https://images.unsplash.com/photo-1511300636408-a63a89df3482?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
          ],
          dark: [
            'https://wallpapercave.com/wp/wp5991799.jpg',
            'https://images.unsplash.com/photo-1491466424936-e304919aada7?q=80&w=2669&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.unsplash.com/photo-1500673922987-e212871fec22?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://img1.wallspic.com/crops/7/9/9/1/11997/11997-monochrome_photography-nature-tree-black-dark-2560x1440.jpg',
            'https://images.pexels.com/photos/1366957/pexels-photo-1366957.jpeg',
            'https://images.pexels.com/photos/36487/above-adventure-aerial-air.jpg',
            'https://images.pexels.com/photos/2609107/pexels-photo-2609107.jpeg',
            'https://images.pexels.com/photos/2885320/pexels-photo-2885320.jpeg',
            'https://images.hdqwalls.com/download/dark-minimal-scenery-4k-xj-2560x1440.jpg',
            'https://images.wallpaperscraft.com/image/single/lamp_wall_brick_137605_2560x1440.jpg',
            'https://images.unsplash.com/photo-1533134486753-c833f0ed4866?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.pexels.com/photos/2885320/pexels-photo-2885320.jpeg',
            'https://i.ytimg.com/vi/Si4TPBW_KQc/maxresdefault.jpg',
            'https://pbs.twimg.com/media/GGbCIMyWUAAFugu.jpg',
            'https://64.media.tumblr.com/325e11b776fe52de3a7040c841dc8803/tumblr_oii005uUdW1u85r2qo3_1280.png',
            'https://pbs.twimg.com/media/ECKPIpTW4AEFOSN.jpg:large'
          ]
        };
        
        // Set theme class immediately
        document.body.className = document.body.className.replace(/theme-\w+/, `theme-${savedTheme}`);
        
        // Set background immediately
        const bgIndex = savedTheme === 'light' ? savedBgLight : savedBgDark;
        const bgUrl = quickBgs[savedTheme][bgIndex];
        document.documentElement.style.setProperty('--current-bg-image', `url('${bgUrl}')`);
        
        // Set overlay opacity
        const overlayOpacity = savedTheme === 'light' ? '0.2' : '0.4';
        document.documentElement.style.setProperty('--bg-overlay-opacity', overlayOpacity);
      })();
    </script>

    <!-- Theme Toggle Controls -->
    <div class="theme-toggle-container">
      <button class="theme-toggle-btn light-mode-btn" onclick="setTheme('light')" title="Light Mode">
        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
      </button>
      <button class="theme-toggle-btn dark-mode-btn" onclick="setTheme('dark')" title="Dark Mode">
        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
      </button>
      <button class="bg-cycle-btn" onclick="cycleBackground()" title="Change Background">
        <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          <circle cx="8.5" cy="8.5" r="1.5"></circle>
          <polyline points="21 15 16 10 5 21"></polyline>
        </svg>
      </button>
    </div>
    
    {%include "components/notegrowthhistory.njk"%}
{% if settings.dgShowFileTree !== true %}
  {%include "components/navbar.njk"%}
{%else%}
  <!-- Auto-hide sidebar system -->
  <div class="sidebar-trigger-zone"></div>
  {%include "components/filetree.njk"%}
  <div class="sidebar-indicator"></div>
{% endif %}
    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}
    
    <main class="content glass-morphism cm-s-obsidian {{contentClasses}}">
      <header>
      {% if settings.dgShowInlineTitle === true %}
        <h1>{{ noteTitle  }}</h1>
      {% endif %}

      <div class="header-meta">
        {% if settings.dgShowTags === true and tags %}
          <div class="header-tags">
            {% for tag in tags %}
              {% if tag != 'gardenEntry' and tag !='note' %}
                <a class="tag glass-badge" onclick="toggleTagSearch(this)">
                  #{{tag}}
                </a>
              {% endif %}
            {% endfor %}
          </div>
        {% endif %}
      </div>
      {% for imp in dynamics.common.header %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.header %}
        {% include imp %}
      {% endfor %}
      </header>
      {% for imp in dynamics.common.beforeContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.beforeContent %}
        {% include imp %}
      {% endfor %}
      {{ content | hideDataview | taggify | link | safe}}
      {% for imp in dynamics.common.afterContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.index.afterContent %}
        {% include imp %}
      {% endfor %}
    </main>

{% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
  <!-- Auto-hide right sidebar system -->
  <div class="right-sidebar-trigger-zone"></div>
  {%include "components/sidebar.njk" %}
  <div class="right-sidebar-indicator"></div>
{%endif%}

    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.index.footer %}
      {% include imp %}
    {% endfor %}
    {%include "components/lucideIcons.njk"%}
    
    <!-- Theme and Background Management Script -->
    <script>
      // Configuration for backgrounds
      // IMPORTANT: Replace 'yourusername' and 'yourrepo' with your actual GitHub username and repository name
      // Upload your background images to your repository in the following structure:
      // /backgrounds/light/image1.jpg, image2.jpg, etc.
      // /backgrounds/dark/image1.jpg, image2.jpg, etc.
      
      const backgrounds = {
        light: [
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/light/forest-light.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/light/ocean-light.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/light/mountain-light.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/light/abstract-light.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/light/gradient-light.jpg'
          // Add more light backgrounds as needed
        ],
        dark: [
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/dark/space-dark.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/dark/forest-dark.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/dark/city-dark.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/dark/abstract-dark.jpg',
          'https://raw.githubusercontent.com/yourusername/yourrepo/main/backgrounds/dark/gradient-dark.jpg'
          // Add more dark backgrounds as needed
        ]
      };
      
      // Alternative: Use Unsplash or other CDN images as placeholders
      const defaultBackgrounds = {
          light: [
            'https://images.unsplash.com/photo-1460574283810-2aab119d8511?q=80&w=1463&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.unsplash.com/photo-1469474968028-56623f02e42e?q=80&w=2674&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://wallpapercave.com/wp/wp4793074.jpg',
           'https://images.pexels.com/photos/1037992/pexels-photo-1037992.jpeg',
            'https://images.pexels.com/photos/776656/pexels-photo-776656.jpeg',
            'https://images.pexels.com/photos/354939/pexels-photo-354939.jpeg',
            'https://images.pexels.com/photos/35857/amazing-beautiful-breathtaking-clouds.jpg',
            'https://www.pixelstalk.net/wp-content/uploads/images6/2560x1440-HD-Wallpaper-Free-download-1.png',
            'https://wallpapers.com/images/hd/space-2560x1440-2nhn01rnylds261b.jpg',
            'https://images.pexels.com/photos/2775196/pexels-photo-2775196.jpeg',
            'https://images.unsplash.com/photo-1511300636408-a63a89df3482?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
          ],
          dark: [
            'https://wallpapercave.com/wp/wp5991799.jpg',
            'https://images.unsplash.com/photo-1491466424936-e304919aada7?q=80&w=2669&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.unsplash.com/photo-1500673922987-e212871fec22?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://img1.wallspic.com/crops/7/9/9/1/11997/11997-monochrome_photography-nature-tree-black-dark-2560x1440.jpg',
            'https://images.pexels.com/photos/1366957/pexels-photo-1366957.jpeg',
            'https://images.pexels.com/photos/36487/above-adventure-aerial-air.jpg',
            'https://images.pexels.com/photos/2609107/pexels-photo-2609107.jpeg',
            'https://images.pexels.com/photos/2885320/pexels-photo-2885320.jpeg',
            'https://images.hdqwalls.com/download/dark-minimal-scenery-4k-xj-2560x1440.jpg',
            'https://images.wallpaperscraft.com/image/single/lamp_wall_brick_137605_2560x1440.jpg',
            'https://images.unsplash.com/photo-1533134486753-c833f0ed4866?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
            'https://images.pexels.com/photos/2885320/pexels-photo-2885320.jpeg',
            'https://i.ytimg.com/vi/Si4TPBW_KQc/maxresdefault.jpg',
            'https://pbs.twimg.com/media/GGbCIMyWUAAFugu.jpg',
            'https://64.media.tumblr.com/325e11b776fe52de3a7040c841dc8803/tumblr_oii005uUdW1u85r2qo3_1280.png',
            'https://pbs.twimg.com/media/ECKPIpTW4AEFOSN.jpg:large'
          ]
      };
      
// State management
let currentTheme = localStorage.getItem('theme') || 'light'; // Changed default to 'light'
let currentBgIndex = {
  light: 0, // Will be set properly in initTheme()
  dark: 0   // Will be set properly in initTheme()
};
      
 // Initialize theme on page load
function initTheme() {
  // Check if custom backgrounds exist, otherwise use defaults
  if (backgrounds.light[0].includes('yourusername')) {
    console.log('Please update the background URLs in the script with your GitHub repository information');
    // Use default backgrounds if not configured
    Object.assign(backgrounds, defaultBackgrounds);
  }
  
  // Restore background indices from localStorage or set defaults
  currentBgIndex.light = parseInt(localStorage.getItem('bgIndexLight')) || 0;
  currentBgIndex.dark = parseInt(localStorage.getItem('bgIndexDark')) || 0;
  
  // Set theme and ensure background is applied
  setTheme(currentTheme, false);
  updateBackground(); // Explicitly call updateBackground to ensure it's set
}
      
      // Set theme function
      function setTheme(theme, updateStorage = true) {
        currentTheme = theme;
        
        // Update body class
        document.body.className = document.body.className.replace(/theme-\w+/, `theme-${theme}`);
        
        // Update active button states
        document.querySelectorAll('.theme-toggle-btn').forEach(btn => btn.classList.remove('active'));
        if (theme === 'light') {
          document.querySelector('.light-mode-btn').classList.add('active');
          document.documentElement.style.setProperty('--bg-overlay-opacity', '0.2');
        } else {
          document.querySelector('.dark-mode-btn').classList.add('active');
          document.documentElement.style.setProperty('--bg-overlay-opacity', '0.4');
        }
        
        // Save to localStorage
        if (updateStorage) {
          localStorage.setItem('theme', theme);
        }
        
        // Update background
        updateBackground();
      }
      
// Cycle through backgrounds
function cycleBackground() {
  const bgArray = backgrounds[currentTheme];
  if (bgArray && bgArray.length > 0) {
    currentBgIndex[currentTheme] = (currentBgIndex[currentTheme] + 1) % bgArray.length;
    updateBackground(); // updateBackground now handles localStorage saving
    
    // Add rotation animation to button
    const btn = document.querySelector('.bg-cycle-btn');
    btn.style.transform = 'rotate(360deg)';
    setTimeout(() => {
      btn.style.transform = 'rotate(0deg)';
    }, 300);
  }
}
      
    // Update background image
function updateBackground() {
  const bgArray = backgrounds[currentTheme];
  if (bgArray && bgArray.length > 0) {
    const bgUrl = bgArray[currentBgIndex[currentTheme]];
    document.documentElement.style.setProperty('--current-bg-image', `url('${bgUrl}')`);
    
    // Save current background index to localStorage
    localStorage.setItem(`bgIndex${currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1)}`, 
                          currentBgIndex[currentTheme].toString());
    
    // Preload next image for smooth transitions
    if (bgArray.length > 1) {
      const nextIndex = (currentBgIndex[currentTheme] + 1) % bgArray.length;
      const img = new Image();
      img.src = bgArray[nextIndex];
    }
  } else {
    // Fallback gradient if no images are available
    const fallbackGradient = currentTheme === 'light' 
      ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
      : 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)';
    document.documentElement.style.setProperty('--current-bg-image', fallbackGradient);
  }
}
      
      // Keyboard shortcuts
      document.addEventListener('keydown', function(e) {
        // Alt + T: Toggle theme
        if (e.altKey && e.key === 't') {
          setTheme(currentTheme === 'light' ? 'dark' : 'light');
        }
        // Alt + B: Cycle background
        if (e.altKey && e.key === 'b') {
          cycleBackground();
        }
      });
      
      // Initialize on page load
      document.addEventListener('DOMContentLoaded', function() {
        initTheme();
        
        // Add smooth transitions after initial load
        setTimeout(() => {
          document.body.style.transition = 'background 0.5s ease-in-out';
        }, 100);
      });
      
      // Handle tag search toggle
      function toggleTagSearch(element) {
        const tagText = element.innerText.replace('#', '');
        if (window.toggleTagSearch) {
          window.toggleTagSearch(tagText);
        }
      }
      
      // Optional: Auto-cycle backgrounds
      // Uncomment the following to automatically change backgrounds every 30 seconds
      /*
      setInterval(() => {
        cycleBackground();
      }, 30000);
      */
    </script>

<!-- Sidebar Toggle Script -->
<script>
let sidebarTimer;
const sidebar = document.querySelector('.filetree-sidebar');
const triggerZone = document.querySelector('.sidebar-trigger-zone');

if (sidebar && triggerZone) {
  // Show sidebar on hover
  function showSidebar() {
    clearTimeout(sidebarTimer);
    sidebar.classList.add('sidebar-visible');
  }

  // Hide sidebar with delay
  function hideSidebar() {
    sidebarTimer = setTimeout(() => {
      sidebar.classList.remove('sidebar-visible');
    }, 300); // 300ms delay before hiding
  }

  // Event listeners
  triggerZone.addEventListener('mouseenter', showSidebar);
  triggerZone.addEventListener('mouseleave', hideSidebar);
  sidebar.addEventListener('mouseenter', showSidebar);
  sidebar.addEventListener('mouseleave', hideSidebar);

  // Touch support for mobile
  triggerZone.addEventListener('touchstart', (e) => {
    e.preventDefault();
    if (sidebar.classList.contains('sidebar-visible')) {
      sidebar.classList.remove('sidebar-visible');
    } else {
      showSidebar();
    }
  });
}
</script>

<!-- Right Sidebar Toggle Script -->
<script>
let rightSidebarTimer;
const rightSidebar = document.querySelector('.sidebar');
const rightTriggerZone = document.querySelector('.right-sidebar-trigger-zone');

if (rightSidebar && rightTriggerZone) {
  // Show right sidebar on hover
  function showRightSidebar() {
    clearTimeout(rightSidebarTimer);
    rightSidebar.classList.add('sidebar-visible');
  }

  // Hide right sidebar with delay
  function hideRightSidebar() {
    rightSidebarTimer = setTimeout(() => {
      rightSidebar.classList.remove('sidebar-visible');
    }, 300); // 300ms delay before hiding
  }

  // Event listeners for right sidebar
  rightTriggerZone.addEventListener('mouseenter', showRightSidebar);
  rightTriggerZone.addEventListener('mouseleave', hideRightSidebar);
  rightSidebar.addEventListener('mouseenter', showRightSidebar);
  rightSidebar.addEventListener('mouseleave', hideRightSidebar);

  // Touch support for mobile - right sidebar
  rightTriggerZone.addEventListener('touchstart', (e) => {
    e.preventDefault();
    if (rightSidebar.classList.contains('sidebar-visible')) {
      rightSidebar.classList.remove('sidebar-visible');
    } else {
      showRightSidebar();
    }
  });

  // Keyboard shortcut for right sidebar (Alt + R)
  document.addEventListener('keydown', function(e) {
    if (e.altKey && e.key === 'r') {
      e.preventDefault();
      if (rightSidebar.classList.contains('sidebar-visible')) {
        rightSidebar.classList.remove('sidebar-visible');
      } else {
        showRightSidebar();
      }
    }
  });
}
</script>

  </body>
</html>
